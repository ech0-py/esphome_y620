substitutions:
  device: Y620

esphome:
  name: "y620-vfd"
  comment: "Controls Y620 VFD (IVR-11S, IBO, IPRO) over MODBUS"
  name_add_mac_suffix: false
  project:
    name: "ech0.y620-controller"
    version: "1.0.0"

# esp32:
#   board: esp32dev

esp8266:
  board: d1_mini

# Enable logging
logger:
  #level: DEBUG
  # Disable logging via UART, since we're using this for modbus communication
  baud_rate: 0
    
# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
# Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Y620 Fallback Hotspot"
    password: "12345"

captive_portal:

uart:
  id: mod_bus
  # esp32dev
  # tx_pin: 17
  # rx_pin: 16
  # d1 mini v4
  tx_pin: 1
  rx_pin: 3
  baud_rate: 9600
  data_bits: 8
  stop_bits: 1
  parity: none

modbus:
 id: modbus1

modbus_controller:
  - id: y620
    address: 0x01
    modbus_id: modbus1
    setup_priority: -10
    update_interval: 15s

sensor:
  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1000
    name: "${device} Output frequency"
    device_class: frequency
    unit_of_measurement: "Hz"
    icon: "mdi:sine-wave"
    accuracy_decimals: 2
    filters:
      - multiply: 0.01

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1001
    name: "${device} Output current"
    device_class: current
    unit_of_measurement: "A"
    icon: "mdi:current-ac"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1002
    name: "${device} Busbar voltage"
    device_class: voltage
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1003
    name: "${device} Temperature"
    device_class: temperature
    unit_of_measurement: "Â°C"
    icon: "mdi:sine-wave"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
      - delta: 0.3

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1005
    name: "${device} Pressure (set)"
    device_class: pressure
    unit_of_measurement: "bar"
    icon: "mdi:waves"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1006
    name: "${device} Pressure (actual)"
    device_class: pressure
    unit_of_measurement: "bar"
    icon: "mdi:waves-arrow-up"
    accuracy_decimals: 1
    filters:
      - multiply: 0.1

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1007
    name: "${device} Speed"
    device_class: speed
    unit_of_measurement: "rpm"
    icon: "mdi:fan"

# additional sensors:

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1008
    name: "${device} Total run time"
    entity_category: diagnostic
    device_class: duration
    unit_of_measurement: "H"
    icon: "mdi:timer-sand-full"

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    address: 0x1009
    name: "${device} Total power-up time"
    entity_category: diagnostic
    device_class: duration
    unit_of_measurement: "H"
    icon: "mdi:timer-sand-full"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${device} IP address"

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    name: "${device} Operational status"
    entity_category: diagnostic
    icon: "mdi:state-machine"
    address: 0x3000
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string("Run");
        case 2: return std::string("Reverse");
        case 3: return std::string("Standby");
        case 4: return std::string("Failure");
        case 5: return std::string("Alarm");
        case 6: return std::string("Sleeping");
        default: return std::string("Unknown");
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    name: "${device} Alarm status"
    entity_category: diagnostic
    icon: "mdi:state-machine"
    address: 0x1016
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string("Water shortage protection");
        case 2: return std::string("High water pressure protection");
        case 3: return std::string("Low water pressure protection");
        case 4: return std::string("Low current protection");
        default: return esphome::to_string(value);
      }
      return x;

  - platform: modbus_controller
    modbus_controller_id: y620
    register_type: holding
    name: "${device} Fault status"
    entity_category: diagnostic
    icon: "mdi:state-machine"
    address: 0x5000
    raw_encode: HEXBYTES
    lambda: |-
      uint16_t value = modbus_controller::word_from_hex_str(x, 0);
      switch (value) {
        case 1: return std::string("Output short circuit");
        case 2: return std::string("Acceleration overcurrent");
        case 3: return std::string("Deceleration overcurrent");
        case 4: return std::string("Running overcurrent");
        case 5: return std::string("Software overcurrent");
        case 6: return std::string("Internal fault");
        case 7: return std::string("Ground fault");
        case 8: return std::string("Acceleration overvoltage");
        case 9: return std::string("Deceleration overvoltage");
        case 10: return std::string("Running overvoltage");
        case 14: return std::string("Underload");
        case 15: return std::string("VFD overload");
        case 16: return std::string("Motor overload");
        case 17: return std::string("Current detection fault");
        case 18: return std::string("Running undervoltage");
        case 19: return std::string("NO terminal fault");
        case 20: return std::string("NC terminal fault");
        case 21: return std::string("Overheating");
        case 22: return std::string("Input phase loss");
        case 23: return std::string("Output phase loss");
        case 24: return std::string("Memory failure");
        case 25: return std::string("Running time reaches set time");
        case 26: return std::string("PID feedback fault");
        case 27: return std::string("RS485 fault");
        case 28: return std::string("Interference");
        default: return esphome::to_string(value);
      }
      return x;
